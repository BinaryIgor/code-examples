// Generated by components/package.py from web-components-reuse:82f2bf6c729fc063e603906db0a4349d2b8141da

// Common types definition
/**
* @typedef {Object} AssetOrCurrency
* @property {string} name
* @property {number} marketSize
*/

export function formatMoney(value, denomination) {
    const zeros = value.length;
    if (zeros > 15) {
        return `${value.substring(0, zeros - 15)} ${value.substring(zeros - 15, zeros - 12)} ${value.substring(zeros - 12, zeros - 9)} ${value.substring(zeros - 9, zeros - 6)} ${value.substring(zeros - 6, zeros - 3)} ${value.substring(zeros - 3)} ${denomination}`;
    }
    if (zeros > 12) {
        return `${value.substring(0, zeros - 12)} ${value.substring(zeros - 12, zeros - 9)} ${value.substring(zeros - 9, zeros - 6)} ${value.substring(zeros - 6, zeros - 3)} ${value.substring(zeros - 3)} ${denomination}`;
    }
    if (zeros > 9) {
        return `${value.substring(0, zeros - 9)} ${value.substring(zeros - 9, zeros - 6)} ${value.substring(zeros - 6, zeros - 3)} ${value.substring(zeros - 3)} ${denomination}`;
    }
    if (zeros > 6) {
        return `${value.substring(0, zeros - 6)} ${value.substring(zeros - 6, zeros - 3)} ${value.substring(zeros - 3)} ${denomination}`;
    }
    return `${value} ${denomination}`;
}

export class BaseHTMLElement extends HTMLElement {

    _t = null;
    _tNamespace = '';

    set t(value) {
        this._t = value;
        // TODO: shouldn't all components be re-renderable and called from here?
    }

    set tNamespace(value) {
        this._tNamespace = value;
    }

    translation(key) {
        const namespacedKey = (this.getAttribute("t-namespace") ?? this._tNamespace) + key;
        const attributeTranslation = this.getAttribute(`t-${namespacedKey}`);
        if (attributeTranslation != undefined) {
            return attributeTranslation;
        }
        return this._t ? this._t(namespacedKey) : null;
    }

    translationAttribute(key) {
        const translation = this.translation(key);
        if (translation) {
            return `t-${key}="${translation}"`;
        }
        return "";
    }

    translationAttributeRemovingNamespace(key, namespace) {
        const translation = this.translation(namespace + key);
        if (translation) {
            return `t-${key}="${translation}"`;
        }
        return "";
    }
}class TabsContainer extends HTMLElement {

    _activeTab = 0;
    set activeTab(value) {
        this._activeTab = value;
        this._updateActiveTab();
    }

    activeTabClass = "underline";

    connectedCallback() {
        this._tabsHeader = this.querySelector("[data-tabs-header]");
        this._tabsBody = this.querySelector("[data-tabs-body]");
        this.activeTabClass = this.getAttribute("active-tab-class") ?? this.activeTabClass;
        if (!this._tabsHeader) {
            throw new Error("Tabs header must be defined and marked with data-tabs-header attribute!");
        }
        if (!this._tabsBody) {
            throw new Error("Tabs body must be defined and marked with data-tabs-body attribute!");
        }

        [...this._tabsHeader.children].forEach((tab, i) => {
            tab.addEventListener('click', () => this.activeTab = i);
        });

        [...this._tabsBody.children].forEach((tab) => {
            tab.classList.add("hidden");
        });

        this._updateActiveTab();
    }

    _updateActiveTab() {
        [...this._tabsHeader.children].forEach((tab, i) => {
            if (i == this._activeTab) {
                tab.classList.add(this.activeTabClass);
            } else {
                tab.classList.remove(this.activeTabClass);
            }
        });
        [...this._tabsBody.children].forEach((tab, i) => {
            if (i == this._activeTab) {
                tab.classList.remove('hidden');
            } else {
                tab.classList.add('hidden');
            }
        });
    }
}

class TabHeader extends HTMLElement {

    connectedCallback() {
        this.classList.add("text-2xl");
        this.classList.add("p-2");
        this.classList.add("cursor-pointer");
        this.classList.add("grow");
    }
}

class DropDownContainer extends HTMLElement {

    connectedCallback() {
        const optionsZIndex = this.getAttribute("options-z-index") ?? '99';
        const anchor = this.querySelector('[data-drop-down-anchor]') ?? this;
        anchor.style = "position: relative; display: inline-block";

        const options = this.querySelector("[data-drop-down-options]");
        if (!options) {
            throw new Error("Options must be defined and marked with data-drop-down-options attribute!");
        }
        options.style = `position: absolute; z-index: ${optionsZIndex}`;
        options.classList.add("hidden");

        anchor.onclick = (e) => {
            // Do not hide other, opened DropDowns
            e.stopPropagation();
            options.classList.toggle("hidden");
        };

        window.addEventListener("click", e => {
            if (e.target != anchor && e.target.parentNode != anchor) {
                options.classList.add("hidden");
            }
        });
    }
}

class InfoModal extends HTMLElement {

    #container = null;
    #closeButton = null;
    #titleElement = null;
    #contentElement = null;

    connectedCallback() {
        const titleClassToAppend = this.getAttribute('title-class');
        const title = this.getAttribute("title");
        const content = this.getAttribute("content");

        let titleClass = "text-xl font-bold p-4";
        if (titleClassToAppend) {
            titleClass = titleClass + " " + titleClassToAppend;
        }

        this.innerHTML = `
        <div data-container class="bg-black/70" style="position: fixed; top: 0; left: 0; height: 100%; width: 100%; z-index: 100; display: none">
            <div class="max-w-lg w-11/12 rounded top-1/2 left-1/2 absolute -translate-x-1/2 -translate-y-1/2 bg-white">
                <span data-close-button class="cursor-pointer text-4xl px-2" style="position: absolute; top: 0px; right: 0px">Ã—</span>    
                <div data-title-element class="${titleClass}">${title ? title : ''}</div>
                <div data-content-element class="px-4 pb-12">${content ? content : ''}</div>
            </div>
        </div>
        `;

        this.#container = this.querySelector('[data-container]');
        this.#closeButton = this.querySelector('[data-close-button]');
        this.#titleElement = this.querySelector('[data-title-element]');
        this.#contentElement = this.querySelector('[data-content-element]');

        this.#closeButton.onclick = () => this.close();

        this.#container.addEventListener("click", e => {
            if (e.target == this.#container) {
                this.close();
            }
        });
    }

    show({ title, content }) {
        if (title) {
            this.#titleElement.textContent = title;
        }
        if (content) {
            this.#contentElement.textContent = content;
        }
        this.#container.style.display = "block";
    }

    close() {
        this.#container.style.display = "none";
        this.dispatchEvent(new CustomEvent('im.closed', { bubbles: true }));
    }
}

class ErrorModal extends HTMLElement {

    #modal = null;
    #onShowHandler = null;

    connectedCallback() {
        this.innerHTML = `<info-modal title-class="text-red-500"></info-modal>`;

        this.#modal = this.querySelector("info-modal");
        this.#onShowHandler = (e) => {
            const { title, error } = e.detail;
            this.#modal.show({ title, content: error });
        };

        document.addEventListener('em.show', this.#onShowHandler);
    }

    disconnectedCallback() {
        document.removeEventListener('em.show', this.#onShowHandler);
    }
}


class AssetElement extends BaseHTMLElement {

    /**
     * Supported attributes
     * {string} id: asset id
     * {string} name: asset name
     * {number} market-size
     * {number} previous-market-size
     * {string} value-change-reason: optional reason of the market size change
     * {string} denomination
     * {string} class: additional class to append to the root div
     */
    connectedCallback() {
        this._render();
    }

    attributeChangedCallback(name, oldValue, newValue) {
        this._render();
    }

    _render() {
        const [id, name, marketSize, previousMarketSize, denomination, valueChangeReason] = [this.getAttribute("id"), this.getAttribute("name"),
        this.getAttribute("market-size"), this.getAttribute("previous-market-size"), this.getAttribute("denomination"), this.getAttribute("value-change-reason")
        ];
        if (id == undefined || name == undefined) {
            return;
        }
        const classesToAppend = this.getAttribute("class");

        if (previousMarketSize) {
            this._previousMarketSize = previousMarketSize;
        }

        let previousMarketSizeComponent;
        if (this._previousMarketSize && this._previousMarketSize != marketSize) {
            const previousMarketSizeInt = parseInt(this._previousMarketSize);
            const currentMarketSizeInt = parseInt(marketSize);
            const marketIsUp = currentMarketSizeInt > previousMarketSizeInt;
            let marketPercentageDiff;
            if (marketIsUp) {
                marketPercentageDiff = Math.round((currentMarketSizeInt - previousMarketSizeInt) * 100 * 100 / previousMarketSizeInt) / 100.0;
            } else {
                marketPercentageDiff = Math.round((previousMarketSizeInt - currentMarketSizeInt) * 100 * 100 / currentMarketSizeInt) / 100.0;
            }
            previousMarketSizeComponent = `
            <div>
                <span class="w-1/2 inline-block">${this.translation("previous-market-size-label")}:</span><span class="underline text-right w-1/2 inline-block">${formatMoney(this._previousMarketSize, denomination)}</span>
            <div>
            <p class="text-right"><span class="italic">${marketIsUp ? this.translation('up-by-info') : this.translation('down-by-info')} ${marketPercentageDiff}%</span>; ${valueChangeReason ?? 'UNKNOWN'}</p>`;
        } else {
            previousMarketSizeComponent = ``;
        }

        this.innerHTML = `
        <div data-id=${id} class="border-1 p-2 rounded-lg ${classesToAppend ? classesToAppend : ""}">
            <p class="font-bold">${name}</p>
            <div>
                <span class="w-1/2 inline-block">${this.translation('market-size-label')}:</span><span class="underline text-right w-1/2 inline-block">${formatMoney(marketSize, denomination)}</span>
            </div>
            ${previousMarketSizeComponent}
        </div>
        `;
    }
}


class CurrencyElement extends BaseHTMLElement {

    /**
     * Supported attributes
     * {string} id: currency id
     * {string} name: currency name
     * {number} market-size
     * {number} previous-market-size
     * {string} denomination
     * {string} class: additional class to append to the root div
     */
    connectedCallback() {
        this._render();
    }

    attributeChangedCallback(name, oldValue, newValue) {
        this._render();
    }

    _render() {
        const [id, name, marketSize, previousMarketSize, denomination] = [this.getAttribute("id"), this.getAttribute("name"),
        this.getAttribute("market-size"), this.getAttribute("previous-market-size"), this.getAttribute("denomination")
        ];
        if (id == undefined || name == undefined) {
            return;
        }
        const classesToAppend = this.getAttribute("class");

        if (previousMarketSize) {
            this._previousMarketSize = previousMarketSize;
        }

        let previousMarketSizeComponent;
        if (this._previousMarketSize && this._previousMarketSize != marketSize) {
            const previousMarketSizeInt = parseInt(this._previousMarketSize);
            const currentMarketSizeInt = parseInt(marketSize);
            const marketIsUp = currentMarketSizeInt > previousMarketSizeInt;
            let marketPercentageDiff;
            if (marketIsUp) {
                marketPercentageDiff = Math.round((currentMarketSizeInt - previousMarketSizeInt) * 100 * 100 / previousMarketSizeInt) / 100.0;
            } else {
                marketPercentageDiff = Math.round((previousMarketSizeInt - currentMarketSizeInt) * 100 * 100 / currentMarketSizeInt) / 100.0;
            }
            previousMarketSizeComponent = `
            <p class="text-right italic">${marketIsUp ? this.translation('up-by-info') : this.translation('down-by-info')} ${marketPercentageDiff}%</p>`;
        } else {
            previousMarketSizeComponent = ``;
        }

        this.innerHTML = `
        <div data-id=${id} class="border-1 p-2 rounded-lg ${classesToAppend ? classesToAppend : ""}">
            <p class="font-bold">${name}</p>
            <div>
                <span class="w-1/2 inline-block">${this.translation('daily-turnover-label')}:</span><span class="underline text-right w-1/2 inline-block">${formatMoney(marketSize, denomination)}</span>
                </div>
            <div>
                <span class="w-1/2 inline-block">${this.translation('yearly-turnover-label')}:</span><span class="underline text-right w-1/2 inline-block">${formatMoney(`${365 * parseInt(marketSize)}`, denomination)}</span>
            </div>
            ${previousMarketSizeComponent}
        </div>
        `;
    }
}


/**
* @typedef {Object} AssetOrCurrencyElement
* @property {string} id
* @property {string} name
* @property {number} marketSize
* @property {string} denomination
*/

class AssetsAndCurrencies extends BaseHTMLElement {

    _assets = [];
    _assetsValueChangeReason = undefined;
    _currencies = [];
    _denomination = "USD";
    _assetsContainer = undefined;
    _currenciesContainer = undefined;

    /** @type {AssetOrCurrencyElement[]} */
    set assets(value) {
        this._assets = value;
        this._renderAssets();
    }

    set assetsValueChangeReason(value) {
        this._assetsValueChangeReason = value;
        this._renderAssets();
    }

    /** @type {AssetOrCurrencyElement[]} */
    set currencies(value) {
        this._currencies = value;
        this._renderCurrencies();
    }

    /** @type {string} */
    set denomination(value) {
        this._denomination = value;
        this._renderAssets();
        this._renderCurrencies();
    }

    connectedCallback() {
        this.innerHTML = `
        <div class="m-4">
            <tabs-container active-tab-class="underline">
                <div class="flex" data-tabs-header>
                    <tab-header>${this.translation('assets-header')}</tab-header>
                    <tab-header>${this.translation('currencies-header')}</tab-header>
                </div>
                <div data-tabs-body>
                    <div class="h-[40dvh] overflow-y-auto">
                    ${this._assetsHTML()}
                    </div>
                    <div class="h-[40dvh] overflow-y-auto">
                    ${this._currenciesHTML()}
                    </div>
                </div>
            </tabs-container>
        </div>`;

        const tabsBody = this.querySelector("[data-tabs-body]");
        this._assetsContainer = tabsBody.children[0];
        this._currenciesContainer = tabsBody.children[1];
    }

    _assetsHTML(previousAssetElements = []) {
        return this._assets.map(a => {
            const previousAsset = previousAssetElements.find(pa => pa.id == a.id);
            let previousMarketSize;
            if (!previousAsset) {
                previousMarketSize = a.marketSize;
            } else {
                const previousCurrencyMarketSize = previousAsset.getAttribute("market-size");
                if (previousCurrencyMarketSize != a.marketSize) {
                    previousMarketSize = previousCurrencyMarketSize;
                } else {
                    previousMarketSize = previousAsset.getAttribute("previous-market-size");
                }
            }

            return `<asset-element class="my-2" id="${a.id}" name="${a.name}"
                market-size="${a.marketSize}" previous-market-size="${previousMarketSize}"
                denomination="${a.denomination}"
                value-change-reason="${this._assetsValueChangeReason}"
                ${this.translationAttribute('market-size-label')}
                ${this.translationAttribute('previous-market-size-label')}
                ${this.translationAttribute('up-by-info')}
                ${this.translationAttribute('down-by-info')}>
            </asset-element>`;
        }).join("\n");
    }

    _currenciesHTML(previousCurrencyElements = []) {
        return this._currencies.map(c => {
            const previousCurrency = previousCurrencyElements.find(pc => pc.id == c.id);
            let previousMarketSize;
            if (!previousCurrency) {
                previousMarketSize = c.marketSize;
            } else {
                const previousCurrencyMarketSize = previousCurrency.getAttribute("market-size");
                if (previousCurrencyMarketSize != c.marketSize) {
                    previousMarketSize = previousCurrencyMarketSize;
                } else {
                    previousMarketSize = previousCurrency.getAttribute("previous-market-size");
                }
            }

            return `<currency-element class="my-2" id="${c.id}" name="${c.name}"
                market-size="${c.marketSize}" previous-market-size="${previousMarketSize}"
                denomination="${c.denomination}"
                ${this.translationAttribute('daily-turnover-label')}
                ${this.translationAttribute('yearly-turnover-label')}
                ${this.translationAttribute('up-by-info')}
                ${this.translationAttribute('down-by-info')}>
            </currency-element>`})
            .join("\n");
    }

    _renderAssets() {
        if (this._assetsContainer) {
            const currentAssetElements = [...this.querySelectorAll("asset-element")];
            this._assetsContainer.innerHTML = this._assetsHTML(currentAssetElements);
        }
    }

    _renderCurrencies() {
        if (this._currenciesContainer) {
            const currentCurrencyElements = [...this.querySelectorAll("currency-element")];
            this._currenciesContainer.innerHTML = this._currenciesHTML(currentCurrencyElements);
        }
    }
}


class MarketsHeader extends BaseHTMLElement {

    _denomination = 'USD';
    _liveUpdatesEnabled = true;
    _denominationExchangeRates = [];
    _liveUpdatesEnabledElement = null;
    _denominationElement = null;


    set denomination(value) {
        this._denomination = value;
        if (this._denominationElement) {
            this._denominationElement.textContent = this._denomination;
        }
    }

    set denominationExchangeRates(value) {
        this._denominationExchangeRates = value;
        this._renderDenominationOptions();
    }

    connectedCallback() {
        this.innerHTML = `
        <div class="m-4">
            <div class="absolute right-4 text-xl">${this.translation('live-updates')} <span class="cursor-pointer">${this._liveUpdatesElementText()}</span>
            </div>
            <span class="text-3xl">${this.translation('markets-in')} </span>
            <drop-down-container>
                <span class="underline cursor-pointer text-3xl pr-24">${this._denomination}</span>
                <ul class="border-1 rounded cursor-pointer bg-white text-lg" data-drop-down-options>
                    ${this._denominationOptionsHTML()}
                </ul>
            </drop-down-container>
        </div>
        `;

        this._liveUpdatesEnabledElement = this.querySelector("span");
        this._liveUpdatesEnabledElement.onclick = () => {
            this._liveUpdatesEnabled = !this._liveUpdatesEnabled;
            this._liveUpdatesEnabledElement.textContent = this._liveUpdatesElementText();
            this.dispatchEvent(new CustomEvent('mh.live-updates-toggled', { bubbles: true, detail: this._liveUpdatesEnabled }));
        };

        this._denominationElement = this.querySelector("drop-down-container > span");
    }

    _denominationOptionsHTML() {
        return this._denominationExchangeRates.map(der => `<li class="py-2 px-4 border-b-1 last:border-0" data-option-id="${der.name}">${der.name}: ${der.exchangeRate}</li>`).join('\n');
    }

    _renderDenominationOptions() {
        const optionsContainer = this.querySelector("ul");
        if (optionsContainer) {
            optionsContainer.innerHTML = this._denominationOptionsHTML();
            this._setOptionsClickHandlers();
        }
    }

    _setOptionsClickHandlers() {
        [...this.querySelectorAll("li")].forEach(o => {
            o.onclick = () => {
                this._denomination = o.getAttribute("data-option-id");
                this._denominationElement.textContent = this._denomination;
                this.dispatchEvent(new CustomEvent('mh.denomination-changed', { bubbles: true, detail: this._denomination }));
            };
        });
    }

    _liveUpdatesElementText() {
        return `${this._liveUpdatesEnabled ? this.translation('live-updates-on') : this.translation('live-updates-off')}`;
    }
}


class MarketsComparator extends BaseHTMLElement {

    static observedAttributes = ["asset-items", "currency-items"];

    _fromMarketsComparatorInput = null;
    _toMarketsComparatorInput = null;
    _comparisonElement = null;

    _fromMarketSize = null;
    _toMarketSize = null;

    /** @type {AssetOrCurrency[]} */
    set assets(value) {
        if (this._fromMarketsComparatorInput) {
            this._setValuesUsingAttributes(this._fromMarketsComparatorInput, value, "asset");
        }
        if (this._toMarketsComparatorInput) {
            this._setValuesUsingAttributes(this._toMarketsComparatorInput, value, "asset");
        }
    }

    /** @type {AssetOrCurrency[]} */
    set currencies(value) {
        if (this._fromMarketsComparatorInput) {
            this._setValuesUsingAttributes(this._fromMarketsComparatorInput, value, "currency");
        }
        if (this._toMarketsComparatorInput) {
            this._setValuesUsingAttributes(this._toMarketsComparatorInput, value, "currency");
        }
    }

    _setValuesUsingAttributes(element, values, prefix) {
        for (let i = 0; i < values.length; i++) {
            element.setAttribute(`${prefix}-${i}-name`, values[i].name);
            element.setAttribute(`${prefix}-${i}-market-size`, values[i].marketSize);
        }
        element.setAttribute(`${prefix}-items`, values.length);
    }

    connectedCallback() {
        this._render();

        this._chosenMarketSizeChangedEventHandler = e => {
            const { name, marketSize } = e.detail;
            if (e.target === this._fromMarketsComparatorInput) {
                this._fromMarketSize = marketSize;
                this._renderComparisonElementHTML();
                this.dispatchEvent(new CustomEvent("mc.from-market-size-changed", {
                    bubbles: true,
                    detail: { name, marketSize }
                }));
            } else if (e.target === this._toMarketsComparatorInput) {
                this._toMarketSize = marketSize;
                this._renderComparisonElementHTML();
                this.dispatchEvent(new CustomEvent("mc.to-market-size-changed", {
                    bubbles: true,
                    detail: { name, marketSize }
                }));
            }
        }
        document.addEventListener('mci.chosen-market-size-changed', this._chosenMarketSizeChangedEventHandler);
    }

    disconnectedCallback() {
        document.removeEventListener('mci.chosen-market-size-changed', this._chosenMarketSizeChangedEventHandler);
    }

    attributeChangedCallback(name, oldValue, newValue) {
        if (name == 'asset-items') {
            this.assets = assetsFromAttributes(this);
        } else if (name == 'currency-items') {
            this.currencies = currenciesFromAttributes(this);
        }
    }

    _render() {
        this.innerHTML = `
        <div>
            <markets-comparator-input options-z-index="101"
                ${this.translationAttribute('asset-or-currency-input-placeholder')}
                ${this.translationAttribute('market-size-input-label')}
                ${this.translationAttribute('days-turnover-input-label')}>
            </markets-comparator-input>
            <div class="py-4">${this.translation('markets-to')}</div>
            <markets-comparator-input options-z-index="100"
                ${this.translationAttribute('asset-or-currency-input-placeholder')}
                ${this.translationAttribute('market-size-input-label')}
                ${this.translationAttribute('days-turnover-input-label')}>
            </markets-comparator-input>
            <div data-comparison-element>${this._comparisonElementHTML()}</div>
        </div>
        `;

        [this._fromMarketsComparatorInput, this._toMarketsComparatorInput] = this.querySelectorAll("markets-comparator-input");
        this._comparisonElement = this.querySelector('[data-comparison-element]');
    }

    _comparisonElementHTML() {
        if (!this._fromMarketSize || !this._toMarketSize) {
            return '<span class="text-xl my-4">-<span>';
        }
        return `<span class="text-xl my-4 underline">${this._fromMarketSize.toExponential(3)} / ${this._toMarketSize.toExponential(3)} = ${this._chosenMarketsComparedValue()}</span>`;
    }

    _chosenMarketsComparedValue() {
        if (!this._fromMarketSize || !this._toMarketSize) {
            return 0;
        }
        return Math.round(this._fromMarketSize * 1000 / this._toMarketSize) / 1000.0;
    }

    _renderComparisonElementHTML() {
        this._comparisonElement.innerHTML = this._comparisonElementHTML();
    }
}

function assetsFromAttributes(element) {
    const countAttribute = element.getAttribute("asset-items");
    if (!countAttribute) {
        return [];
    }
    const assets = [];
    for (let i = 0; i < parseInt(countAttribute); i++) {
        const name = element.getAttribute(`asset-${i}-name`);
        const marketSize = element.getAttribute(`asset-${i}-market-size`);
        if (name && marketSize) {
            assets.push({ name, marketSize: parseInt(marketSize) });
        }
    }
    return assets;
}

function currenciesFromAttributes(element) {
    const countAttribute = element.getAttribute("currency-items");
    if (!countAttribute) {
        return [];
    }
    const currencies = [];
    for (let i = 0; i < parseInt(countAttribute); i++) {
        const name = element.getAttribute(`currency-${i}-name`);
        const marketSize = element.getAttribute(`currency-${i}-market-size`);
        if (name && marketSize) {
            currencies.push({ name, marketSize: parseInt(marketSize) });
        }
    }
    return currencies;
}

class MarketsComparatorInput extends BaseHTMLElement {

    static observedAttributes = ["asset-items", "currency-items"];

    /** @type {AssetOrCurrency[]} */
    _assets = [];
    /** @type {AssetOrCurrency[]} */
    _currencies = [];
    /** @type {AssetOrCurrency[]} */
    _assetOrCurrencyOptions = [];

    set assets(value) {
        this._assets = value;
        this._recalculateAssetOrCurrencyOptions();
    }

    set currencies(value) {
        this._currencies = value;
        this._recalculateAssetOrCurrencyOptions();
    }

    _assetOrCurrencyInput = null;
    _curencyTurnoverInputMultiplier = 1;

    connectedCallback() {
        this._render();
    }

    attributeChangedCallback(name, oldValue, newValue) {
        if (name == 'asset-items') {
            this.assets = assetsFromAttributes(this);
        } else if (name == 'currency-items') {
            this.currencies = currenciesFromAttributes(this);
        }
    }

    _render() {
        const optionsZIndex = this.getAttribute("options-z-index") ?? '99';
        this.innerHTML = `
        <drop-down-container options-z-index="${optionsZIndex}">
            <div data-drop-down-header>
                ${this._dropDownHeaderHTML()}
            </div>
            <ul class="border-1 rounded cursor-pointer bg-white max-h-[350px] overflow-y-auto overflow-x-none" data-drop-down-options>
                ${this._optionsHTML()}
            </ul>
        </drop-down-container>
        `;

        this._setOptionsClickHandlers();

        this.querySelector('[data-drop-down-header]')
            .querySelector("input")?.addEventListener("input", e => {
                this._curencyTurnoverInputMultiplier = e.target.value;
                this._calculateChosenMarketSizeChange();
            });
    }

    _optionsHTML() {
        return this._assetOrCurrencyOptions.map(o =>
            `<li class="p-2 border-b-1 last:border-0" data-option-id="${o.name}">${o.name}</li>`)
            .join('\n');
    }

    _dropDownHeaderHTML() {
        let marketSizeHTML;
        if (this._isAsset()) {
            marketSizeHTML = `<span>${this.translation('market-size-input-label')}</span`;
        } else if (this._isCurrency()) {
            marketSizeHTML = `
            <span>
                <input type="number" class="mx-2 px-2 max-w-[75px]" value="${this._curencyTurnoverInputMultiplier}">
                <span>${this.translation('days-turnover-input-label')}</span>
            </span>`;
        } else {
            marketSizeHTML = ``;
        }
        return `
        <span data-drop-down-anchor>${this._assetOrCurrencyInput ?? this.translation('asset-or-currency-input-placeholder')}</span>
        ${marketSizeHTML}
        `;
    }

    _setOptionsClickHandlers() {
        [...this.querySelectorAll("li")].forEach(o => {
            o.onclick = () => {
                this._assetOrCurrencyInput = o.getAttribute("data-option-id");
                this._calculateChosenMarketSizeChange();
                this._render();
            };
        });
    }

    _renderOptionsHTML() {
        const optionsContainer = this.querySelector("ul");
        if (optionsContainer) {
            optionsContainer.innerHTML = this._optionsHTML();
            this._setOptionsClickHandlers();
        }
    }

    _isAsset() {
        return this._assetOrCurrencyInput ? this._assets.find(a => a.name == this._assetOrCurrencyInput) : false;
    }

    _isCurrency() {
        return this._assetOrCurrencyInput ? this._currencies.find(c => c.name == this._assetOrCurrencyInput) : false;
    }

    _recalculateAssetOrCurrencyOptions() {
        const assetOrCurrencyOptions = [];
        this._assets.forEach(a => assetOrCurrencyOptions.push(a));
        this._currencies.forEach(c => assetOrCurrencyOptions.push(c));
        this._assetOrCurrencyOptions = assetOrCurrencyOptions;

        this._renderOptionsHTML();
        this._calculateChosenMarketSizeChange();
    }

    _calculateChosenMarketSizeChange() {
        if (!this._assetOrCurrencyInput) {
            return;
        }

        const assetInput = this._assets.find(a => a.name == this._assetOrCurrencyInput);
        const currencyInput = this._currencies.find(c => c.name == this._assetOrCurrencyInput);

        const inputMarketSize = assetInput ? assetInput.marketSize : currencyInput.marketSize * this._curencyTurnoverInputMultiplier;

        this.dispatchEvent(new CustomEvent("mci.chosen-market-size-changed", {
            bubbles: true,
            detail: { name: this._assetOrCurrencyInput, marketSize: inputMarketSize }
        }));
    }
}


/**
* @typedef {Object} AssetOrCurrencyProjection
* @property {number} marketSize
* @property {number} growthRate
*/

class ProjectionsCalculator extends BaseHTMLElement {

    /** @type {?AssetOrCurrency} */
    _assetOrCurrency1 = null;
    /** @type {?AssetOrCurrency} */
    _assetOrCurrency2 = null;
    /** @type {?number} */
    _assetOrCurrency1ExpectedGrowthRate = null;
    /** @type {?number} */
    _assetOrCurrency2ExpectedGrowthRate = null;
    /** @type {?number} */
    _customProjectionYears = null;

    set assetOrCurrency1(value) {
        this._assetOrCurrency1 = value;
        this._renderProjectionsResultsHTML();
    }

    set assetOrCurrency2(value) {
        this._assetOrCurrency2 = value;
        this._renderProjectionsResultsHTML();
    }

    _assetOrCurrency1Header = null;
    _assetOrCurrency1Input = null;
    _assetOrCurrency2Header = null;
    _assetOrCurrency2Input = null;
    _customProjectionInput = null;
    _projectionsResultsContainer = null;
    _customProjectionContainer = null;
    _customProjectionTextElement = null;
    _customProjectionResultContainer = null;

    connectedCallback() {
        this.innerHTML = `
        <div>
            <div>${this._assetOrCurrencyHeaderText(this._assetOrCurrency1)}</div>
            <input type="number" class="px-2 cursor-pointer" placeholder="%" value=${this._assetOrCurrency1ExpectedGrowthRate ?? ''}>
            <div>${this._assetOrCurrencyHeaderText(this._assetOrCurrency2)}</div>
            <input type="number" class="px-2 cursor-pointer" placeholder="%" value=${this._assetOrCurrency2ExpectedGrowthRate ?? ''}>
            <div>
                ${this._projectionsResultsHTML()}
            </div>
            <div>
                ${this._customProjectionHTML()}
            </div>
        </div>
        `;

        const container = this.querySelector("div");

        const divs = container.querySelectorAll("div");
        [this._assetOrCurrency1Header, this._assetOrCurrency2Header, this._projectionsResultsContainer] = divs;
        this._customProjectionContainer = divs[divs.length - 1];

        [this._assetOrCurrency1Input, this._assetOrCurrency2Input,
        this._customProjectionInput] = container.querySelectorAll("input");

        this._assetOrCurrency1Input.addEventListener("input", e => {
            this._assetOrCurrency1ExpectedGrowthRate = parseInt(e.target.value);
            this._renderProjectionsResultsHTML();
        });
        this._assetOrCurrency2Input.addEventListener("input", e => {
            this._assetOrCurrency2ExpectedGrowthRate = parseInt(e.target.value);
            this._renderProjectionsResultsHTML();
        });
        this._customProjectionInput.addEventListener("input", e => {
            this._customProjectionYears = parseInt(e.target.value);
            this._updateCustomProjectionText();
            this._updateCustomProjectionResult();
        });

        this._customProjectionTextElement = this.querySelector('[data-custom-projection-text-element]');
        this._customProjectionResultContainer = this.querySelector('[data-custom-projection-result-container]');
    }

    _assetOrCurrencyHeaderText(assetOrCurrency) {
        return `${assetOrCurrency ? assetOrCurrency.name : this.translation('asset-or-currency-placeholder')} ${this.translation('asset-or-currency-expected-annual-growth-rate')}:`;
    }

    _renderProjectionsResultsHTML() {
        if (this._projectionsResultsContainer && this._customProjectionContainer) {
            this._projectionsResultsContainer.innerHTML = this._projectionsResultsHTML();
            this._updateCustomProjectionResult();
        }
    }

    _projectionsResultsHTML() {
        const inYearsText = (years) => `${this.translation('results-in-header')} ${years} ${this.translation(years == 1 ? 'year' : 'years')}`;
        const currentYear = new Date().getFullYear();
        return [1, 5, 10].map(y => `
            <div class="mt-t">${inYearsText(y)} (${currentYear + y}):</div>
            ${this._projectionsResultHTML(y)}`)
            .join('\n');
    }

    _projectionsResultHTML(years) {
        const ac1 = this._assetOrCurrency1WithExpectedGrowthRate();
        const ac2 = this._assetOrCurrency2WithExpectedGrowthRate();
        if (years != null && ac1 != null && ac2 != null) {
            return `
            <projections-result years=${years}
                asset-or-currency-1-market-size="${ac1.marketSize}"
                asset-or-currency-1-growth-rate="${ac1.growthRate}"
                asset-or-currency-2-market-size="${ac2.marketSize}"
                asset-or-currency-2-growth-rate="${ac2.growthRate}">
            </projections-result>`;
        }
        return '<div>-</div>';
    }

    _customProjectionHTML() {
        return `
        ${this.translation('results-in-header')} <input class="max-w-[60px] px-2" type="number">
        <span data-custom-projection-text-element>${this._customProjectionYearText()}</span>:
        <div data-custom-projection-result-container>${this._projectionsResultHTML(this._customProjectionYears)}</div>
        `;
    }

    _customProjectionYearText() {
        const currentYear = new Date().getFullYear();
        return '(' + (this._customProjectionYears == null || Number.isNaN(this._customProjectionYears) ?
            `${currentYear} + N` : (currentYear + this._customProjectionYears)) + ')';
    }

    _updateCustomProjectionText() {
        this._customProjectionTextElement.textContent = this._customProjectionYearText();
    }

    _updateCustomProjectionResult() {
        this._customProjectionContainer.innerHTML = this._projectionsResultHTML(this._customProjectionYears);
    }

    _assetOrCurrency1WithExpectedGrowthRate() {
        if (this._assetOrCurrency1 && this._assetOrCurrency1ExpectedGrowthRate != null) {
            return { marketSize: this._assetOrCurrency1.marketSize, growthRate: this._assetOrCurrency1ExpectedGrowthRate };
        }
        return null;
    }

    _assetOrCurrency2WithExpectedGrowthRate() {
        if (this._assetOrCurrency2 && this._assetOrCurrency2ExpectedGrowthRate != null) {
            return { marketSize: this._assetOrCurrency2.marketSize, growthRate: this._assetOrCurrency2ExpectedGrowthRate };
        }
        return null;
    }
}

class ProjectionsResult extends HTMLElement {

    static observedAttributes = [
        "years",
        "asset-or-currency-1-market-size", "asset-or-currency-1-growth-rate",
        "asset-or-currency-2-market-size", "asset-or-currency-2-growth-rate"
    ];

    /** @type {number} */
    _years = 1;
    /** @type {?AssetOrCurrencyProjection} */
    _assetOrCurrency1 = null;
    /** @type {?AssetOrCurrencyProjection} */
    _assetOrCurrency2 = null;

    set years(value) {
        this._years = value;
        this._render();
    }

    set assetOrCurrency1(value) {
        this._assetOrCurrency1 = value;
        this._render();
    }

    set assetOrCurrency2(value) {
        this._assetOrCurrency2 = value;
        this._render();
    }

    connectedCallback() {
        this._render();
    }

    attributeChangedCallback(name, oldValue, newValue) {
        if (name.includes("asset-or-currency-1")) {
            const assetOrCurrency = this._assetOrCurrencyFromAttributes("asset-or-currency-1");
            if (assetOrCurrency) {
                this.assetOrCurrency1 = assetOrCurrency;
            }
        } else if (name.includes("asset-or-currency-2")) {
            const assetOrCurrency = this._assetOrCurrencyFromAttributes("asset-or-currency-2");
            if (assetOrCurrency) {
                this.assetOrCurrency2 = assetOrCurrency;
            }
        } else if (name == 'years') {
            this.years = parseInt(newValue);
        }
    }

    _assetOrCurrencyFromAttributes(prefix) {
        const marketSize = this.getAttribute(`${prefix}-market-size`);
        const growthRate = this.getAttribute(`${prefix}-growth-rate`);
        if (marketSize && growthRate) {
            return { marketSize: parseInt(marketSize), growthRate: parseInt(growthRate) };
        }
        return null;
    }

    _render() {
        const nominator = this._exponentialNumberString(this._projectionNumerator());
        const denominator = this._exponentialNumberString(this._projectionDenominator());
        this.innerHTML = `
        <div class="underline">${nominator} / ${denominator} = ${this._projection()} 
        </div>
        `;
    }

    _exponentialNumberString(n) {
        return n?.toExponential(3) ?? '';
    }

    _marketSizeChangedByRate(marketSize, growthRate, decrease = false) {
        let changedMarketSize;
        if (decrease) {
            changedMarketSize = marketSize - (marketSize * growthRate / 100.0);
        } else {
            changedMarketSize = marketSize + (marketSize * growthRate / 100.0);
        }
        if (changedMarketSize <= 0 || Number.isNaN(changedMarketSize)) {
            return null;
        }
        return changedMarketSize;
    }

    _marketSizeChangedByRateInGivenYears(marketSize, growthRate, years) {
        const negativeYears = years < 0;
        let increasedMarketSize = marketSize;
        for (let i = 0; i < Math.abs(years); i++) {
            increasedMarketSize = this._marketSizeChangedByRate(increasedMarketSize, growthRate, negativeYears);
            if (!increasedMarketSize) {
                return null;
            }
        }
        return increasedMarketSize;
    }

    _projectionNumerator() {
        if (this._assetOrCurrency1) {
            return this._marketSizeChangedByRateInGivenYears(
                this._assetOrCurrency1.marketSize,
                this._assetOrCurrency1.growthRate,
                this._years);
        }
        return null;
    }

    _projectionDenominator() {
        if (this._assetOrCurrency2) {
            return this._marketSizeChangedByRateInGivenYears(
                this._assetOrCurrency2.marketSize,
                this._assetOrCurrency2.growthRate,
                this._years);
        }
        return null;
    }

    _projection() {
        const numerator = this._projectionNumerator();
        const denominator = this._projectionDenominator();
        if (numerator && denominator) {
            return Math.round(numerator * 1000 / denominator) / 1000.0;
        }
        return '';
    }
}


class MarketsProjections extends BaseHTMLElement {

    _marketsComparatorComponent = null;
    _projectionsCalculatorComponent = null;

    /** @type {?AssetOrCurrency} */
    _fromAssetOrCurrency = null;
    /** @type {?AssetOrCurrency} */
    _toAssetOrCurrency = null;

    /** @type {AssetOrCurrency[]} */
    set assets(value) {
        if (this._marketsComparatorComponent) {
            this._marketsComparatorComponent.assets = value;
        }
    }

    /** @type {AssetOrCurrency[]} */
    set currencies(value) {
        if (this._marketsComparatorComponent) {
            this._marketsComparatorComponent.currencies = value;
        }
    }

    connectedCallback() {
        this.innerHTML = `
        <div class="rounded border-1 p-2 mt-16 mx-4 mb-8">
            <h2 class="text-2xl mb-8">${this.translation('projections-header')}</h2>
            <markets-comparator
                ${this.translationAttributeRemovingNamespace('asset-or-currency-input-placeholder', 'markets-comparator.')}
                ${this.translationAttributeRemovingNamespace('market-size-input-label', 'markets-comparator.')}
                ${this.translationAttributeRemovingNamespace('days-turnover-input-label', 'markets-comparator.')}
                ${this.translationAttributeRemovingNamespace('markets-to', 'markets-comparator.')}>
            </markets-comparator>
            <projections-calculator 
                ${this.translationAttributeRemovingNamespace('asset-or-currency-placeholder', 'projections-calculator.')}
                ${this.translationAttributeRemovingNamespace('asset-or-currency-expected-annual-growth-rate', 'projections-calculator.')}
                ${this.translationAttributeRemovingNamespace('results-in-header', 'projections-calculator.')}
                ${this.translationAttributeRemovingNamespace('year', 'projections-calculator.')}
                ${this.translationAttributeRemovingNamespace('years', 'projections-calculator.')}>
            </projections-calculator>
        </div>
        `;

        this._marketsComparatorComponent = this.querySelector("markets-comparator");
        this._projectionsCalculatorComponent = this.querySelector("projections-calculator");

        const fromMarketSizeChangedEventHandler = e => {
            this._fromAssetOrCurrency = e.detail;
            this._projectionsCalculatorComponent.assetOrCurrency1 = this._fromAssetOrCurrency;
        };
        const toMarketSizeChangedEventHandler = e => {
            this._toAssetOrCurrency = e.detail;
            this._projectionsCalculatorComponent.assetOrCurrency2 = this._toAssetOrCurrency;
        };

        this.addEventListener('mc.from-market-size-changed', fromMarketSizeChangedEventHandler);
        this.addEventListener('mc.to-market-size-changed', toMarketSizeChangedEventHandler);
    }
}


export function registerComponents() {
    customElements.define('tabs-container', TabsContainer);
    customElements.define('tab-header', TabHeader);
    customElements.define("drop-down-container", DropDownContainer);
    customElements.define('info-modal', InfoModal);
    customElements.define('error-modal', ErrorModal);
    customElements.define("asset-element", AssetElement);
    customElements.define("currency-element", CurrencyElement);
    customElements.define('assets-and-currencies', AssetsAndCurrencies);
    customElements.define("markets-header", MarketsHeader);
    customElements.define("markets-comparator-input", MarketsComparatorInput);
    customElements.define('markets-comparator', MarketsComparator);
    customElements.define("projections-result", ProjectionsResult);
    customElements.define("projections-calculator", ProjectionsCalculator);
    customElements.define('markets-projections', MarketsProjections);
}